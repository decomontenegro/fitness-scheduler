// This is your Prisma schema file for production (PostgreSQL)
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                String         @id @default(cuid())
  email             String         @unique
  name              String
  password          String
  phone             String?
  whatsapp          String?
  avatar            String?
  role              String         @default("CLIENT")
  isActive          Boolean        @default(true)
  emailVerified     DateTime?
  
  // Notification preferences
  emailNotifications Boolean        @default(true)
  smsNotifications  Boolean        @default(false)
  whatsappNotifications Boolean    @default(true)
  pushNotifications Boolean        @default(true)
  
  // 2FA and Security fields
  twoFactorEnabled  Boolean        @default(false)
  twoFactorSecret   String?
  backupCodes       String?        // JSON array of backup codes
  lastLoginAt       DateTime?
  loginAttempts     Int            @default(0)
  lockoutUntil      DateTime?
  passwordResetToken String?
  passwordResetExpiry DateTime?
  
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  trainerProfile    TrainerProfile?
  clientProfile     ClientProfile?
  sentMessages      Message[]      @relation("SentMessages")
  receivedMessages  Message[]      @relation("ReceivedMessages")
  notifications     Notification[]
  authTokens        AuthToken[]
  auditLogs         AuditLog[]
  pushSubscriptions PushSubscription[]
  payments          Payment[]
  subscriptions     Subscription[]
  packages          Package[]
  walletTransactions WalletTransaction[]
  vouchers          Voucher[]
  referralsMade     Referral[]     @relation("ReferralsMade")
  referralsReceived Referral[]     @relation("ReferralsReceived")
  invoices          Invoice[]
}

// Trainer specific profile
model TrainerProfile {
  id                String         @id @default(cuid())
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  bio               String?
  specialties       String?
  experience        Int?           // Years of experience
  hourlyRate        Float?
  rating            Float          @default(0)
  totalReviews      Int            @default(0)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  appointments      Appointment[]  @relation("TrainerAppointments")
  services          Service[]
  availability      Availability[]
  reviews           Review[]
  clients           ClientProfile[] @relation("TrainerClients")
  packages          Package[]
}

// Client specific profile
model ClientProfile {
  id                String         @id @default(cuid())
  userId            String         @unique
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  goals             String?
  medicalHistory    String?
  emergencyContact  String?
  birthDate         DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  // Relations
  appointments      Appointment[]  @relation("ClientAppointments")
  trainers          TrainerProfile[] @relation("TrainerClients")
  progressTracking  ProgressTracking[]
  measurements      Measurement[]
  workoutHistory    WorkoutHistory[]
}

// Appointment model
model Appointment {
  id                String         @id @default(cuid())
  trainerId         String
  trainer           TrainerProfile @relation("TrainerAppointments", fields: [trainerId], references: [id])
  clientId          String
  client            ClientProfile  @relation("ClientAppointments", fields: [clientId], references: [id])
  serviceId         String?
  service           Service?       @relation(fields: [serviceId], references: [id])
  date              DateTime
  startTime         String
  endTime           String
  status            String         @default("SCHEDULED")
  notes             String?
  cancelReason      String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  payment           Payment?
  review            Review?
  reminders         Reminder[]
}

// Service model
model Service {
  id                String         @id @default(cuid())
  trainerId         String
  trainer           TrainerProfile @relation(fields: [trainerId], references: [id])
  name              String
  description       String?
  duration          Int            // in minutes
  price             Float
  maxCapacity       Int            @default(1)
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  appointments      Appointment[]
  packages          PackageService[]
}

// Availability model
model Availability {
  id                String         @id @default(cuid())
  trainerId         String
  trainer           TrainerProfile @relation(fields: [trainerId], references: [id])
  dayOfWeek         Int            // 0-6 (Sunday-Saturday)
  startTime         String
  endTime           String
  isRecurring       Boolean        @default(true)
  specificDate      DateTime?      // For non-recurring availability
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Payment model
model Payment {
  id                String         @id @default(cuid())
  appointmentId     String?        @unique
  appointment       Appointment?   @relation(fields: [appointmentId], references: [id])
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  amount            Float
  currency          String         @default("BRL")
  status            String         @default("PENDING")
  method            String?
  transactionId     String?
  metadata          String?        // JSON string
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  refund            Refund?
}

// Review model
model Review {
  id                String         @id @default(cuid())
  appointmentId     String         @unique
  appointment       Appointment    @relation(fields: [appointmentId], references: [id])
  trainerId         String
  trainer           TrainerProfile @relation(fields: [trainerId], references: [id])
  rating            Int
  comment           String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Message model
model Message {
  id                String         @id @default(cuid())
  senderId          String
  sender            User           @relation("SentMessages", fields: [senderId], references: [id])
  receiverId        String
  receiver          User           @relation("ReceivedMessages", fields: [receiverId], references: [id])
  content           String
  isRead            Boolean        @default(false)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Notification model
model Notification {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  title             String
  message           String
  type              String
  isRead            Boolean        @default(false)
  metadata          String?        // JSON string
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// AuthToken model for refresh tokens
model AuthToken {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  token             String         @unique
  type              String         @default("REFRESH")
  deviceId          String?
  deviceName        String?
  ipAddress         String?
  userAgent         String?
  expiresAt         DateTime
  lastUsedAt        DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// AuditLog model for tracking important actions
model AuditLog {
  id                String         @id @default(cuid())
  userId            String?
  user              User?          @relation(fields: [userId], references: [id])
  action            String
  entityType        String?
  entityId          String?
  oldValues         String?        // JSON string
  newValues         String?        // JSON string
  ipAddress         String?
  userAgent         String?
  success           Boolean        @default(true)
  errorMessage      String?
  createdAt         DateTime       @default(now())
}

// PushSubscription model for web push notifications
model PushSubscription {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  endpoint          String         @unique
  p256dh            String
  auth              String
  deviceType        String?
  deviceName        String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Subscription model for recurring payments
model Subscription {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  planId            String
  plan              Plan           @relation(fields: [planId], references: [id])
  status            String         @default("ACTIVE")
  currentPeriodStart DateTime
  currentPeriodEnd  DateTime
  cancelAtPeriodEnd Boolean        @default(false)
  canceledAt        DateTime?
  metadata          String?        // JSON string
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Plan model for subscription plans
model Plan {
  id                String         @id @default(cuid())
  name              String
  description       String?
  price             Float
  currency          String         @default("BRL")
  interval          String         @default("MONTHLY")
  features          String?        // JSON array
  maxAppointments   Int?
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  subscriptions     Subscription[]
}

// Package model for bundled services
model Package {
  id                String         @id @default(cuid())
  trainerId         String?
  trainer           TrainerProfile? @relation(fields: [trainerId], references: [id])
  userId            String?
  user              User?          @relation(fields: [userId], references: [id])
  name              String
  description       String?
  totalSessions     Int
  usedSessions      Int            @default(0)
  price             Float
  validUntil        DateTime
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  // Relations
  services          PackageService[]
}

// PackageService join table
model PackageService {
  id                String         @id @default(cuid())
  packageId         String
  package           Package        @relation(fields: [packageId], references: [id])
  serviceId         String
  service           Service        @relation(fields: [serviceId], references: [id])
  quantity          Int            @default(1)
  createdAt         DateTime       @default(now())
}

// Refund model
model Refund {
  id                String         @id @default(cuid())
  paymentId         String         @unique
  payment           Payment        @relation(fields: [paymentId], references: [id])
  amount            Float
  reason            String?
  status            String         @default("PENDING")
  processedAt       DateTime?
  metadata          String?        // JSON string
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// WalletTransaction model for credit system
model WalletTransaction {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  type              String         // CREDIT, DEBIT
  amount            Float
  balance           Float
  description       String?
  referenceType     String?        // PAYMENT, REFUND, BONUS, etc
  referenceId       String?
  createdAt         DateTime       @default(now())
}

// Voucher model for discount codes
model Voucher {
  id                String         @id @default(cuid())
  code              String         @unique
  description       String?
  discountType      String         // PERCENTAGE, FIXED
  discountValue     Float
  minPurchase       Float?
  maxDiscount       Float?
  usageLimit        Int?
  usedCount         Int            @default(0)
  validFrom         DateTime
  validUntil        DateTime
  isActive          Boolean        @default(true)
  userId            String?        // Specific user voucher
  user              User?          @relation(fields: [userId], references: [id])
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Referral model
model Referral {
  id                String         @id @default(cuid())
  referrerId        String
  referrer          User           @relation("ReferralsMade", fields: [referrerId], references: [id])
  referredId        String
  referred          User           @relation("ReferralsReceived", fields: [referredId], references: [id])
  status            String         @default("PENDING") // PENDING, COMPLETED, EXPIRED
  rewardType        String?        // CREDIT, DISCOUNT, etc
  rewardValue       Float?
  completedAt       DateTime?
  expiresAt         DateTime?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// ProgressTracking model
model ProgressTracking {
  id                String         @id @default(cuid())
  clientId          String
  client            ClientProfile  @relation(fields: [clientId], references: [id])
  date              DateTime
  weight            Float?
  bodyFat           Float?
  muscleMass        Float?
  notes             String?
  photos            String?        // JSON array of photo URLs
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Measurement model
model Measurement {
  id                String         @id @default(cuid())
  clientId          String
  client            ClientProfile  @relation(fields: [clientId], references: [id])
  date              DateTime
  chest             Float?
  waist             Float?
  hips              Float?
  biceps            Float?
  thighs            Float?
  calves            Float?
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// WorkoutHistory model
model WorkoutHistory {
  id                String         @id @default(cuid())
  clientId          String
  client            ClientProfile  @relation(fields: [clientId], references: [id])
  date              DateTime
  workoutType       String
  duration          Int            // in minutes
  caloriesBurned    Float?
  exercises         String?        // JSON array
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Reminder model
model Reminder {
  id                String         @id @default(cuid())
  appointmentId     String
  appointment       Appointment    @relation(fields: [appointmentId], references: [id])
  type              String         // EMAIL, SMS, PUSH
  scheduledFor      DateTime
  sent              Boolean        @default(false)
  sentAt            DateTime?
  error             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}

// Invoice model
model Invoice {
  id                String         @id @default(cuid())
  userId            String
  user              User           @relation(fields: [userId], references: [id])
  invoiceNumber     String         @unique
  amount            Float
  tax               Float?
  total             Float
  status            String         @default("PENDING")
  dueDate           DateTime
  paidAt            DateTime?
  items             String?        // JSON array
  notes             String?
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
}