import { NextRequest, NextResponse } from 'next/server'
import { StripeService } from '@/services/stripe'
import { prisma } from '@/lib/prisma'
import { verifyAuth } from '@/lib/auth'
import { z } from 'zod'

const checkoutSchema = z.object({
  type: z.enum(['appointment', 'package', 'subscription']),
  appointmentId: z.string().optional(),
  packageId: z.string().optional(),
  subscriptionPlanId: z.string().optional(),
  amount: z.number().min(1).optional(),
  description: z.string().optional(),
  voucherCode: z.string().optional()
})

export async function POST(request: NextRequest) {
  try {
    const user = await verifyAuth(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const validation = checkoutSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid request data', details: validation.error.issues },
        { status: 400 }
      )
    }

    const { type, appointmentId, packageId, subscriptionPlanId, amount, description, voucherCode } = validation.data

    let finalAmount = amount || 0
    let voucherDiscount = 0

    // Apply voucher if provided
    if (voucherCode) {
      const voucher = await prisma.voucher.findFirst({
        where: {
          code: voucherCode,
          isActive: true,
          validFrom: { lte: new Date() },
          validUntil: { gte: new Date() }
        }
      })

      if (!voucher) {
        return NextResponse.json({ error: 'Invalid or expired voucher' }, { status: 400 })
      }

      // Check usage limits
      const voucherUsage = await prisma.voucherUsage.count({
        where: { voucherId: voucher.id, userId: user.id }
      })

      if (voucherUsage >= voucher.maxUsesPerUser) {
        return NextResponse.json({ error: 'Voucher usage limit exceeded' }, { status: 400 })
      }

      if (voucher.maxUses && voucher.usedCount >= voucher.maxUses) {
        return NextResponse.json({ error: 'Voucher usage limit exceeded' }, { status: 400 })
      }

      // Calculate discount
      if (voucher.type === 'percentage') {
        voucherDiscount = Math.round(finalAmount * (voucher.amount / 100))
      } else {
        voucherDiscount = Math.min(voucher.amount, finalAmount)
      }

      finalAmount = Math.max(0, finalAmount - voucherDiscount)
    }

    let paymentIntent

    switch (type) {
      case 'appointment':
        if (!appointmentId || !amount) {
          return NextResponse.json(
            { error: 'appointmentId and amount are required for appointment payments' },
            { status: 400 }
          )
        }

        // Verify appointment exists and belongs to user
        const appointment = await prisma.appointment.findFirst({
          where: {
            id: appointmentId,
            clientId: user.clientProfile?.id
          },
          include: {
            trainer: { include: { user: true } },
            service: true
          }
        })

        if (!appointment) {
          return NextResponse.json({ error: 'Appointment not found' }, { status: 404 })
        }

        if (appointment.isPaid) {
          return NextResponse.json({ error: 'Appointment already paid' }, { status: 400 })
        }

        paymentIntent = await StripeService.createPaymentIntent({
          userId: user.id,
          appointmentId,
          amount: finalAmount,
          trainerId: appointment.trainerId,
          description: description || `Training session with ${appointment.trainer.user.name}`
        })
        break

      case 'package':
        if (!packageId) {
          return NextResponse.json(
            { error: 'packageId is required for package payments' },
            { status: 400 }
          )
        }

        const packageData = await prisma.package.findUnique({
          where: { id: packageId },
          include: { trainer: { include: { user: true } } }
        })

        if (!packageData || !packageData.isActive) {
          return NextResponse.json({ error: 'Package not found or inactive' }, { status: 404 })
        }

        finalAmount = finalAmount || packageData.price

        paymentIntent = await StripeService.createPackagePaymentIntent({
          userId: user.id,
          packageId,
          amount: finalAmount,
          description: description || `${packageData.name} - ${packageData.sessions} sessions`
        })
        break

      case 'subscription':
        if (!subscriptionPlanId) {
          return NextResponse.json(
            { error: 'subscriptionPlanId is required for subscription payments' },
            { status: 400 }
          )
        }

        const plan = await prisma.subscriptionPlan.findUnique({
          where: { id: subscriptionPlanId }
        })

        if (!plan || !plan.isActive) {
          return NextResponse.json({ error: 'Subscription plan not found or inactive' }, { status: 404 })
        }

        if (!plan.stripePriceId) {
          return NextResponse.json({ error: 'Subscription plan not configured for Stripe' }, { status: 500 })
        }

        const subscription = await StripeService.createSubscription({
          userId: user.id,
          priceId: plan.stripePriceId,
          trialDays: plan.trialDays
        })

        return NextResponse.json({
          success: true,
          subscription: {
            id: subscription.id,
            status: subscription.status,
            clientSecret: (subscription.latest_invoice as any)?.payment_intent?.client_secret
          }
        })

      default:
        return NextResponse.json({ error: 'Invalid payment type' }, { status: 400 })
    }

    // Record voucher usage if applicable
    if (voucherCode && voucherDiscount > 0) {
      const voucher = await prisma.voucher.findFirst({
        where: { code: voucherCode }
      })

      if (voucher) {
        await prisma.voucherUsage.create({
          data: {
            voucherId: voucher.id,
            userId: user.id,
            discountAmount: voucherDiscount
          }
        })

        // Update voucher usage count
        await prisma.voucher.update({
          where: { id: voucher.id },
          data: { usedCount: { increment: 1 } }
        })
      }
    }

    return NextResponse.json({
      success: true,
      paymentIntent: {
        id: paymentIntent.id,
        clientSecret: paymentIntent.client_secret,
        amount: paymentIntent.amount,
        currency: paymentIntent.currency
      },
      discount: voucherDiscount > 0 ? {
        amount: voucherDiscount,
        code: voucherCode
      } : null
    })

  } catch (error) {
    console.error('Checkout error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// Get payment methods for user
export async function GET(request: NextRequest) {
  try {
    const user = await verifyAuth(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const paymentMethods = await StripeService.getPaymentMethods(user.id)

    return NextResponse.json({
      success: true,
      paymentMethods: paymentMethods.map(pm => ({
        id: pm.id,
        type: pm.type,
        card: pm.card ? {
          brand: pm.card.brand,
          last4: pm.card.last4,
          expMonth: pm.card.exp_month,
          expYear: pm.card.exp_year
        } : null
      }))
    })

  } catch (error) {
    console.error('Get payment methods error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}