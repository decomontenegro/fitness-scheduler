import { NextRequest, NextResponse } from 'next/server'
import { StripeService } from '@/services/stripe'
import { prisma } from '@/lib/prisma'
import { verifyAuth } from '@/lib/auth'
import { z } from 'zod'

const subscriptionActionSchema = z.object({
  action: z.enum(['cancel', 'reactivate', 'change_plan']),
  planId: z.string().optional()
})

export async function POST(request: NextRequest) {
  try {
    const user = await verifyAuth(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const validation = subscriptionActionSchema.safeParse(body)
    
    if (!validation.success) {
      return NextResponse.json(
        { error: 'Invalid request data', details: validation.error.issues },
        { status: 400 }
      )
    }

    const { action, planId } = validation.data

    // Get user's current subscription
    const currentSubscription = await prisma.subscription.findFirst({
      where: {
        userId: user.id,
        status: { in: ['active', 'trialing', 'past_due'] }
      },
      include: { plan: true }
    })

    if (!currentSubscription && action !== 'create') {
      return NextResponse.json({ error: 'No active subscription found' }, { status: 404 })
    }

    switch (action) {
      case 'cancel':
        if (!currentSubscription?.stripeSubscriptionId) {
          return NextResponse.json({ error: 'No Stripe subscription found' }, { status: 400 })
        }

        const canceledSubscription = await StripeService.cancelSubscription(
          currentSubscription.stripeSubscriptionId
        )

        return NextResponse.json({
          success: true,
          subscription: {
            id: canceledSubscription.id,
            status: canceledSubscription.status,
            cancelAt: canceledSubscription.cancel_at,
            currentPeriodEnd: canceledSubscription.current_period_end
          }
        })

      case 'reactivate':
        // This would require implementing subscription reactivation
        return NextResponse.json({ error: 'Reactivation not yet implemented' }, { status: 501 })

      case 'change_plan':
        if (!planId) {
          return NextResponse.json({ error: 'planId is required for plan changes' }, { status: 400 })
        }

        const newPlan = await prisma.subscriptionPlan.findUnique({
          where: { id: planId }
        })

        if (!newPlan || !newPlan.stripePriceId) {
          return NextResponse.json({ error: 'Invalid plan' }, { status: 400 })
        }

        // This would require implementing subscription updates in Stripe
        return NextResponse.json({ error: 'Plan changes not yet implemented' }, { status: 501 })

      default:
        return NextResponse.json({ error: 'Invalid action' }, { status: 400 })
    }

  } catch (error) {
    console.error('Subscription management error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

// Get user's subscription details
export async function GET(request: NextRequest) {
  try {
    const user = await verifyAuth(request)
    if (!user) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const subscription = await prisma.subscription.findFirst({
      where: { userId: user.id },
      include: {
        plan: true,
        payments: {
          orderBy: { createdAt: 'desc' },
          take: 5
        }
      },
      orderBy: { createdAt: 'desc' }
    })

    if (!subscription) {
      return NextResponse.json({
        success: true,
        subscription: null,
        plans: await prisma.subscriptionPlan.findMany({
          where: { isActive: true },
          orderBy: { price: 'asc' }
        })
      })
    }

    return NextResponse.json({
      success: true,
      subscription: {
        id: subscription.id,
        status: subscription.status,
        plan: {
          id: subscription.plan.id,
          name: subscription.plan.name,
          price: subscription.plan.price,
          features: {
            maxClients: subscription.plan.maxClients,
            maxServices: subscription.plan.maxServices,
            hasAnalytics: subscription.plan.hasAnalytics,
            hasCustomBranding: subscription.plan.hasCustomBranding,
            hasAdvancedScheduling: subscription.plan.hasAdvancedScheduling,
            hasPrioritySupport: subscription.plan.hasPrioritySupport
          }
        },
        currentPeriodStart: subscription.currentPeriodStart,
        currentPeriodEnd: subscription.currentPeriodEnd,
        trialEnd: subscription.trialEnd,
        cancelAt: subscription.cancelAt,
        recentPayments: subscription.payments.map(payment => ({
          id: payment.id,
          amount: payment.amount,
          status: payment.status,
          createdAt: payment.createdAt
        }))
      },
      plans: await prisma.subscriptionPlan.findMany({
        where: { isActive: true },
        orderBy: { price: 'asc' }
      })
    })

  } catch (error) {
    console.error('Get subscription error:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}