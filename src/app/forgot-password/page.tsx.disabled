'use client';

import { useState } from 'react';
import Link from 'next/link';
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/Card';
import { Mail, ArrowLeft, Dumbbell, AlertCircle } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';

const forgotPasswordSchema = z.object({
  email: z.string().email('Email inválido'),
});

type ForgotPasswordForm = z.infer<typeof forgotPasswordSchema>;

export default function ForgotPasswordPage() {
  const [isSubmitted, setIsSubmitted] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [submitEmail, setSubmitEmail] = useState('');

  const {
    register,
    handleSubmit,
    formState: { errors },
    getValues,
  } = useForm<ForgotPasswordForm>({
    resolver: zodResolver(forgotPasswordSchema),
  });

  const onSubmit = async (data: ForgotPasswordForm) => {
    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/forgot-password', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(data),
      });

      const result = await response.json();

      if (result.success) {
        setSubmitEmail(data.email);
        setIsSubmitted(true);
      } else {
        setError(result.error || 'Erro ao processar solicitação');
      }
    } catch (err) {
      setError('Erro ao conectar com o servidor');
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-primary-50 via-white to-secondary-50 dark:from-gray-900 dark:via-gray-800 dark:to-gray-900 p-4 relative overflow-hidden">
      {/* Background Animation */}
      <div className="absolute inset-0 bg-gradient-to-br from-primary-400/10 to-secondary-400/10 animate-gradient"></div>
      <div className="absolute top-10 left-10 w-72 h-72 bg-primary-400/20 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float"></div>
      <div className="absolute bottom-10 right-10 w-72 h-72 bg-secondary-400/20 rounded-full mix-blend-multiply filter blur-xl opacity-70 animate-float" style={{ animationDelay: "2s" }}></div>
      
      <Card variant="glass" animated className="w-full max-w-md relative z-10 backdrop-blur-2xl">
        <CardHeader className="text-center">
          <div className="flex justify-center mb-4">
            <div className="w-16 h-16 bg-gradient-to-br from-primary-500 to-secondary-500 rounded-full flex items-center justify-center animate-float shadow-xl shadow-primary-500/30">
              <Dumbbell className="h-8 w-8 text-white" />
            </div>
          </div>
          <CardTitle className="text-2xl gradient-text">Recuperar Senha</CardTitle>
          <CardDescription>
            {!isSubmitted 
              ? 'Digite seu email para receber instruções de recuperação'
              : 'Instruções enviadas!'
            }
          </CardDescription>
        </CardHeader>
        
        <CardContent>
          {!isSubmitted ? (
            <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
              {error && (
                <div className="p-3 bg-danger-50 border border-danger-200 text-danger-600 rounded-lg text-sm flex items-center">
                  <AlertCircle className="h-4 w-4 mr-2 flex-shrink-0" />
                  {error}
                </div>
              )}

              <Input
                {...register('email')}
                type="email"
                label="Email"
                placeholder="seu@email.com"
                icon={<Mail className="h-5 w-5" />}
                error={errors.email?.message}
                variant="modern"
              />

              <Button
                type="submit"
                fullWidth
                loading={loading}
                variant="gradient"
                magnetic
                glow
              >
                Enviar instruções
              </Button>

              <div className="text-center">
                <Link href="/login" className="text-sm text-primary-600 hover:text-primary-700 inline-flex items-center gap-1 transition-colors">
                  <ArrowLeft className="h-4 w-4" />
                  Voltar ao login
                </Link>
              </div>
            </form>
          ) : (
            <div className="text-center space-y-6">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto">
                <Mail className="h-8 w-8 text-green-600" />
              </div>
              
              <div className="space-y-3">
                <h3 className="text-lg font-semibold text-gray-900">Email enviado!</h3>
                <p className="text-gray-600">
                  Se o email <strong>{submitEmail}</strong> existir em nossa base, 
                  você receberá instruções para redefinir sua senha em alguns minutos.
                </p>
              </div>

              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 text-sm text-blue-800">
                <div className="flex items-start">
                  <AlertCircle className="h-4 w-4 mr-2 mt-0.5 flex-shrink-0" />
                  <div className="text-left">
                    <p className="font-medium mb-1">Não recebeu o email?</p>
                    <ul className="space-y-1 text-blue-700">
                      <li>• Verifique sua caixa de spam</li>
                      <li>• O email pode levar alguns minutos para chegar</li>
                      <li>• Certifique-se de que digitou o email correto</li>
                    </ul>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <Button
                  onClick={() => {
                    setIsSubmitted(false);
                    setSubmitEmail('');
                    setError('');
                  }}
                  variant="outline"
                  fullWidth
                >
                  Tentar outro email
                </Button>

                <Link href="/login" className="text-sm text-primary-600 hover:text-primary-700 inline-flex items-center gap-1 transition-colors">
                  <ArrowLeft className="h-4 w-4" />
                  Voltar ao login
                </Link>
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}